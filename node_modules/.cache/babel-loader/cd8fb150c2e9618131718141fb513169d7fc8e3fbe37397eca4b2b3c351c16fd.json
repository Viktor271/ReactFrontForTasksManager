{"ast":null,"code":"var _jsxFileName = \"/Users/viktorbelakov/Documents/Develop/tasks/src/\\u0441omponents/TasksList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TasksList = () => {\n  _s();\n  const [tasks, setTasks] = useState([{\n    id: 1,\n    date: '2022-01-01',\n    status: 'completed',\n    title: 'Task 1',\n    body: 'Task Body 1'\n  }, {\n    id: 2,\n    date: '2022-02-01',\n    status: 'in progress',\n    title: 'Task 2',\n    body: 'Task Body 2'\n  }, {\n    id: 3,\n    date: '2022-03-01',\n    status: 'pending',\n    title: 'Task 3',\n    body: 'Task Body 3'\n  }]);\n  const handleEdit = (taskId, newTitle, newStatus) => {\n    const updatedTasks = tasks.map(task => {\n      if (task.id === taskId) {\n        return {\n          ...task,\n          title: newTitle,\n          status: newStatus\n        };\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  };\n  const handleDelete = taskId => {\n    const dueDate = new Date(tasks.find(task => task.id === taskId).date);\n    const today = new Date();\n    if (dueDate < today.setDate(today.getDate() - 6)) {\n      const updatedTasks = tasks.filter(task => task.id !== taskId);\n      setTasks(updatedTasks);\n    } else {\n      alert(\"Task can't be deleted as it's due date is less than 6 days from today.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"TasksList\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"Task_content\",\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"Task_block\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: task.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: task.date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: task.status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: task.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"Task_button\",\n          onClick: () => handleEdit(task.id, 'new text', 'completed'),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"Task_button\",\n          onClick: () => handleDelete(task.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 29\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(TasksList, \"uTukGoGTq7sJciqCtRVk4EkV99M=\");\n_c = TasksList;\nexport default TasksList;\nvar _c;\n$RefreshReg$(_c, \"TasksList\");","map":{"version":3,"names":["React","useState","TasksList","tasks","setTasks","id","date","status","title","body","handleEdit","taskId","newTitle","newStatus","updatedTasks","map","task","handleDelete","dueDate","Date","find","today","setDate","getDate","filter","alert"],"sources":["/Users/viktorbelakov/Documents/Develop/tasks/src/сomponents/TasksList.jsx"],"sourcesContent":["import React, {useState} from 'react';\n\nconst TasksList = () => {\n\n    const [tasks, setTasks] = useState([\n        { id: 1, date: '2022-01-01', status: 'completed', title: 'Task 1', body: 'Task Body 1' },\n        { id: 2, date: '2022-02-01', status: 'in progress', title: 'Task 2', body: 'Task Body 2' },\n        { id: 3, date: '2022-03-01', status: 'pending', title: 'Task 3', body: 'Task Body 3' },\n    ]);\n\n    const handleEdit = (taskId, newTitle, newStatus) => {\n        const updatedTasks = tasks.map((task) => {\n            if (task.id === taskId) {\n                return { ...task, title: newTitle, status: newStatus };\n            }\n            return task;\n        });\n        setTasks(updatedTasks);\n    };\n\n    const handleDelete = (taskId) => {\n        const dueDate = new Date(tasks.find((task) => task.id === taskId).date);\n        const today = new Date();\n        if (dueDate < today.setDate(today.getDate() - 6)) {\n            const updatedTasks = tasks.filter((task) => task.id !== taskId);\n            setTasks(updatedTasks);\n        } else {\n            alert(\"Task can't be deleted as it's due date is less than 6 days from today.\");\n        }\n    };\n\n\n    return (\n        <div className=\"TasksList\">\n                <ul className=\"Task_content\">\n                    {tasks.map((task) => (\n                        <li className=\"Task_block\" key={task.id}>\n                            <p>{task.title}</p>\n                            <p>{task.date}</p>\n                            <p>{task.status}</p>\n                            <p>{task.body}</p>\n                            <button className=\"Task_button\" onClick={() => handleEdit(task.id, 'new text', 'completed')}>Edit</button>\n                            <button className=\"Task_button\" onClick={() => handleDelete(task.id)}>Delete</button>\n                        </li>\n                    ))}\n                </ul>\n        </div>\n    );\n};\n\nexport default TasksList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}