{"ast":null,"code":"var _jsxFileName = \"/Users/viktorbelakov/Documents/Develop/tasks/src/\\u0441omponents/TaskItem.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport MyButton from \"./UI/button/MyButton\";\nimport TaskForm from \"./TaskForm\";\nimport MyModal from \"./UI/MyModal/MyModal\";\nimport TaskUpdate from \"./TaskUpdate\";\nimport format from 'date-fns/format';\nimport '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskItem = props => {\n  _s();\n  const [modal, setModal] = useState(false);\n  const taskUpdated = () => {\n    setModal(false);\n  };\n  const columns = [{\n    field: 'title',\n    headerName: 'Title',\n    width: 150\n  }, {\n    field: 'date',\n    headerName: 'Date',\n    width: 150\n  }, {\n    field: 'status',\n    headerName: 'Status',\n    width: 110\n  }, {\n    field: 'body',\n    headerName: 'Description',\n    width: 160\n  }];\n  const rows = [{\n    title: props.task.title,\n    date: props.task.date,\n    status: props.task.status,\n    body: props.task.body\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 400,\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rows,\n      columns: columns,\n      pageSize: 5,\n      rowsPerPageOptions: [5]\n      //checkboxSelection\n      //disableSelectionOnClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this)\n  // <tr key={props.task.id}>\n  //     <th>{props.task.title}</th>\n  //     <th>{format(new Date(props.task.date), 'dd-MM-Y')}</th>\n  //     <th>{props.task.status}</th>\n  //     <th>{props.task.body}</th>\n  //     <th><MyButton  onClick={() => setModal(true)}>Edit</MyButton></th>\n  //     <MyModal visible={modal} setVisible={setModal}>\n  //         <TaskUpdate update={props.update} taskId={props.task.id} modal={taskUpdated} ></TaskUpdate>\n  //     </MyModal>\n  //     <th><MyButton  onClick={() => props.remove(props.task.id)}>Delete</MyButton></th>\n  // </tr>\n  ;\n};\n_s(TaskItem, \"FxRBWQPa/dKnwvdbY5qed8chvVc=\");\n_c = TaskItem;\nexport default TaskItem;\nvar _c;\n$RefreshReg$(_c, \"TaskItem\");","map":{"version":3,"names":["React","useState","MyButton","TaskForm","MyModal","TaskUpdate","format","TaskItem","props","modal","setModal","taskUpdated","columns","field","headerName","width","rows","title","task","date","status","body","height"],"sources":["/Users/viktorbelakov/Documents/Develop/tasks/src/сomponents/TaskItem.jsx"],"sourcesContent":["import React, {useState} from 'react';\nimport MyButton from \"./UI/button/MyButton\";\nimport TaskForm from \"./TaskForm\";\nimport MyModal from \"./UI/MyModal/MyModal\";\nimport TaskUpdate from \"./TaskUpdate\";\nimport format from 'date-fns/format';\nimport {  } from '@mui/material';\n\nconst TaskItem = (props) => {\n    const [modal, setModal] = useState(false);\n\n    const taskUpdated = () => {\n        setModal(false)\n    }\n\n    const columns = [\n        {\n            field: 'title',\n            headerName: 'Title',\n            width: 150,\n        },\n        {\n            field: 'date',\n            headerName: 'Date',\n            width: 150,\n        },\n        {\n            field: 'status',\n            headerName: 'Status',\n            width: 110,\n        },\n        {\n            field: 'body',\n            headerName: 'Description',\n            width: 160,\n        },\n    ];\n\n    const rows = [\n        { title: props.task.title, date: props.task.date, status: props.task.status, body: props.task.body },\n    ];\n\n    return (\n        <div style={{ height: 400, width: '100%' }}>\n            <DataGrid\n                rows={rows}\n                columns={columns}\n                pageSize={5}\n                rowsPerPageOptions={[5]}\n                //checkboxSelection\n                //disableSelectionOnClick\n            />\n        </div>\n            // <tr key={props.task.id}>\n            //     <th>{props.task.title}</th>\n            //     <th>{format(new Date(props.task.date), 'dd-MM-Y')}</th>\n            //     <th>{props.task.status}</th>\n            //     <th>{props.task.body}</th>\n            //     <th><MyButton  onClick={() => setModal(true)}>Edit</MyButton></th>\n            //     <MyModal visible={modal} setVisible={setModal}>\n            //         <TaskUpdate update={props.update} taskId={props.task.id} modal={taskUpdated} ></TaskUpdate>\n            //     </MyModal>\n            //     <th><MyButton  onClick={() => props.remove(props.task.id)}>Delete</MyButton></th>\n            // </tr>\n    );\n};\n\nexport default TaskItem;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAiB,eAAe;AAAC;AAEjC,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAAA;EACxB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEzC,MAAMU,WAAW,GAAG,MAAM;IACtBD,QAAQ,CAAC,KAAK,CAAC;EACnB,CAAC;EAED,MAAME,OAAO,GAAG,CACZ;IACIC,KAAK,EAAE,OAAO;IACdC,UAAU,EAAE,OAAO;IACnBC,KAAK,EAAE;EACX,CAAC,EACD;IACIF,KAAK,EAAE,MAAM;IACbC,UAAU,EAAE,MAAM;IAClBC,KAAK,EAAE;EACX,CAAC,EACD;IACIF,KAAK,EAAE,QAAQ;IACfC,UAAU,EAAE,QAAQ;IACpBC,KAAK,EAAE;EACX,CAAC,EACD;IACIF,KAAK,EAAE,MAAM;IACbC,UAAU,EAAE,aAAa;IACzBC,KAAK,EAAE;EACX,CAAC,CACJ;EAED,MAAMC,IAAI,GAAG,CACT;IAAEC,KAAK,EAAET,KAAK,CAACU,IAAI,CAACD,KAAK;IAAEE,IAAI,EAAEX,KAAK,CAACU,IAAI,CAACC,IAAI;IAAEC,MAAM,EAAEZ,KAAK,CAACU,IAAI,CAACE,MAAM;IAAEC,IAAI,EAAEb,KAAK,CAACU,IAAI,CAACG;EAAK,CAAC,CACvG;EAED,oBACI;IAAK,KAAK,EAAE;MAAEC,MAAM,EAAE,GAAG;MAAEP,KAAK,EAAE;IAAO,CAAE;IAAA,uBACvC,QAAC,QAAQ;MACL,IAAI,EAAEC,IAAK;MACX,OAAO,EAAEJ,OAAQ;MACjB,QAAQ,EAAE,CAAE;MACZ,kBAAkB,EAAE,CAAC,CAAC;MACtB;MACA;IAAA;MAAA;MAAA;MAAA;IAAA;EACF;IAAA;IAAA;IAAA;EAAA;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;AAEZ,CAAC;AAAC,GAzDIL,QAAQ;AAAA,KAARA,QAAQ;AA2Dd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}