{"ast":null,"code":"var _jsxFileName = \"/Users/viktorbelakov/Documents/Develop/tasks/src/App.js\",\n  _s = $RefreshSig$();\nimport { useMemo, useState } from \"react\";\nimport TasksList from \"./сomponents/TasksList\";\nimport './styles/App.css';\nimport MyInput from \"./сomponents/UI/input/MyInput\";\nimport MyButton from \"./сomponents/UI/button/MyButton\";\nimport TaskForm from \"./сomponents/TaskForm\";\nimport MySelect from \"./сomponents/UI/select/MySelect\";\nimport TaskFilter from \"./сomponents/TaskFilter\";\nimport MyModal from \"./сomponents/UI/MyModal/MyModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tasks, setTasks] = useState([{\n    id: 1,\n    date: '2023-01-01',\n    status: 'completed',\n    title: 'Task 1',\n    body: 'Task Body 1'\n  }, {\n    id: 2,\n    date: '2023-02-02',\n    status: 'in progress',\n    title: 'Task 2',\n    body: 'Task Body 2'\n  }, {\n    id: 3,\n    date: '2023-03-03',\n    status: 'pending',\n    title: 'Task 3',\n    body: 'Task Body 3'\n  }, {\n    id: 4,\n    date: '2023-04-04',\n    status: 'completed',\n    title: 'TEST',\n    body: 'Task Body 4'\n  }]);\n  const [filter, setFilter] = useState({\n    date: '',\n    status: '',\n    sort: ''\n  });\n  const sortedTasks = useMemo(() => {\n    if (filter.sort) {\n      if (filter.sort !== 'date') {\n        return [...tasks].sort((a, b) => a[filter.sort].localeCompare(b[filter.sort]));\n      } else {\n        return [...tasks].sort((a, b) => new Date(a[filter.sort]) - new Date(b[filter.sort]));\n      }\n    } else {\n      return tasks;\n    }\n  }, [filter.sort, tasks]);\n  const filteredSortTasks = useMemo(() => {\n    let filteredTasks = sortedTasks;\n    if (filter.date) {\n      console.log(filter.date);\n      filteredTasks = filteredTasks.filter(task => task.date <= filter.date);\n    }\n    if (filter.status) {\n      filteredTasks = filteredTasks.filter(task => task.status === filter.status);\n    }\n    return filteredTasks;\n  }, [sortedTasks, filter.date, filter.status]);\n  const createTask = newTask => {\n    setTasks([...tasks, newTask]);\n  };\n  const handleDelete = taskId => {\n    const dueDate = new Date(tasks.find(task => task.id === taskId).date);\n    const today = new Date();\n    if (dueDate > today.setDate(today.getDate() + 6) || dueDate < today) {\n      const updatedTasks = tasks.filter(task => task.id !== taskId);\n      setTasks(updatedTasks);\n    } else {\n      alert(\"Task can't be deleted as it's due date is less than 6 days from today.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MyModal, {\n      visible: true,\n      children: /*#__PURE__*/_jsxDEV(TaskForm, {\n        create: createTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TaskFilter, {\n      filter: filter,\n      setFilter: setFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TasksList, {\n      remove: handleDelete,\n      tasks: filteredSortTasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"ukDDYOPLZJataw6ZfJ0tHKXHRCc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useMemo","useState","TasksList","MyInput","MyButton","TaskForm","MySelect","TaskFilter","MyModal","App","tasks","setTasks","id","date","status","title","body","filter","setFilter","sort","sortedTasks","a","b","localeCompare","Date","filteredSortTasks","filteredTasks","console","log","task","createTask","newTask","handleDelete","taskId","dueDate","find","today","setDate","getDate","updatedTasks","alert"],"sources":["/Users/viktorbelakov/Documents/Develop/tasks/src/App.js"],"sourcesContent":["import {useMemo, useState} from \"react\";\nimport TasksList from \"./сomponents/TasksList\";\nimport './styles/App.css'\nimport MyInput from \"./сomponents/UI/input/MyInput\";\nimport MyButton from \"./сomponents/UI/button/MyButton\";\nimport TaskForm from \"./сomponents/TaskForm\";\nimport MySelect from \"./сomponents/UI/select/MySelect\";\nimport TaskFilter from \"./сomponents/TaskFilter\";\nimport MyModal from \"./сomponents/UI/MyModal/MyModal\";\n\nfunction App() {\n\n    const [tasks, setTasks] = useState([\n        {id: 1, date: '2023-01-01', status: 'completed', title: 'Task 1', body: 'Task Body 1'},\n        {id: 2, date: '2023-02-02', status: 'in progress', title: 'Task 2', body: 'Task Body 2'},\n        {id: 3, date: '2023-03-03', status: 'pending', title: 'Task 3', body: 'Task Body 3'},\n        {id: 4, date: '2023-04-04', status: 'completed', title: 'TEST', body: 'Task Body 4'},\n    ]);\n\n\n    const [filter, setFilter] = useState({ date: '', status: '', sort: '' });\n\n    const sortedTasks = useMemo(()=> {\n        if (filter.sort) {\n            if(filter.sort !== 'date'){\n                return [...tasks].sort((a, b) => a[filter.sort].localeCompare(b[filter.sort]))\n            }else{\n                return [...tasks].sort((a, b) => new Date(a[filter.sort]) - new Date(b[filter.sort]))\n            }\n        } else {\n            return tasks;\n        }\n    }, [filter.sort, tasks])\n\n    const filteredSortTasks = useMemo(()=> {\n        let filteredTasks = sortedTasks;\n        if (filter.date) { console.log(filter.date)\n            filteredTasks = filteredTasks.filter((task) => task.date <= filter.date);\n        }\n        if (filter.status) {\n            filteredTasks = filteredTasks.filter((task) => task.status === filter.status);\n        }\n        return filteredTasks;\n    }, [sortedTasks, filter.date, filter.status])\n\n\n    const createTask = (newTask) => {\n        setTasks([...tasks, newTask])\n    }\n\n    const handleDelete = (taskId) => {\n        const dueDate = new Date(tasks.find((task) => task.id === taskId).date);\n        const today = new Date();\n        if (dueDate > today.setDate(today.getDate() + 6) || dueDate < today) {\n            const updatedTasks = tasks.filter((task) => task.id !== taskId);\n            setTasks(updatedTasks);\n        } else {\n            alert(\"Task can't be deleted as it's due date is less than 6 days from today.\");\n        }\n    };\n\n\n\n\n    return (\n        <div>\n\n\n            <MyModal visible={true}\n            >\n                <TaskForm create={createTask}></TaskForm>\n            </MyModal>\n            <TaskFilter\n                filter={filter}\n                setFilter={setFilter}\n            ></TaskFilter>\n\n            <TasksList remove={handleDelete} tasks={filteredSortTasks}/>\n\n\n        </div>\n    );\n\n\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}